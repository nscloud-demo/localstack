name: CircleCI Port

on:
  workflow_dispatch:
  push:

env:
  workspace_retention_days: 1 # We don't need to persist it for long, only for all jobs to download it.

  # TODO: extend duration once workflow is fully migrated
  report_retention_days: 2
  coverage_retention_days: 2

jobs:
  install-and-preflight:
    runs-on: nscloud
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: workspace
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Setup cross-invocation caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('workspace/setup.cfg') }}
      # Likely only needed in CircleCI.
      # TODO verify!
      # - name: Install prerequisites
      #   run: |
      #     # fix for: https://discuss.circleci.com/t/heroku-gpg-issues-in-ubuntu-images/43834/3
      #     sudo rm -rf /etc/apt/sources.list.d/heroku.list
      #     sudo apt-get update
      #     sudo apt-get install -y libsasl2-dev
      - name: Setup environment
        working-directory: workspace
        run: |
          make install
          mkdir -p target/reports
          mkdir -p target/coverage
      - name: Linting
        working-directory: workspace
        run: |
          make lint
      - name: Archive workspace
        run: |
          tar -czf workspace.tar.gz workspace
      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace-${{ runner.os }}
          path: workspace.tar.gz
          retention-days: ${{ env.workspace_retention_days }}

  unit-tests:
    runs-on: nscloud
    needs: install-and-preflight
    steps:
      - name: Download repo
        uses: actions/download-artifact@v3
        with:
          name: workspace-${{ runner.os }}
      - name: Unpack workspace
        run: |
          tar -xzf workspace.tar.gz
      - name: Unit tests
        working-directory: workspace
        env:
          TEST_PATH: tests/unit
          PYTEST_ARGS: --junitxml=target/reports/unit-tests.xml -o junit_suite_name=unit-tests
          COVERAGE_ARGS: -p
        run: |
          make test-coverage
      # Sadly actions/test-reporter does not support Python yet.
      # Maybe there is a better alternative to `store_test_results`.
      - name: Upload test reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-reports-${{ runner.os }}
          path: workspace/target/reports
          retention-days: ${{ env.report_retention_days }}
      - name: Upload test reports
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-coverage-${{ runner.os }}
          path: workspace/.coverage.*
          retention-days: ${{ env.coverage_retention_days }}
